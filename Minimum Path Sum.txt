Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.




class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
              
        int m = grid.size();
        if(!m) return 0;
        
        int n = grid[0].size();
        if(!n) return 0;
        
        
        for(int j = 1;j < n; j++){
            grid[0][j] += grid[0][j-1];
        }
        
        for(int i = 1; i < m; i++){
            grid[i][0] += grid[i-1][0];
            for(int j = 1; j < n; j++){
                grid[i][j] += min(grid[i][j-1], grid[i-1][j] ); 
            }
        }
        return grid[m-1][n-1];
    }
};






class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        if (grid.empty())
            return 0;
        
        vector<int> table = grid[0];
        int m = grid.size();
        int n = table.size();
        
        for(int j = 1;j < n; j++){
            table[j] += table[j-1];
        }
        
        for(int i = 1; i < m; i ++){
            table[0] += grid[i][0];
            for(int j = 1; j < n; j++){
                table[j] = min(table[j-1], table[j]) + grid[i][j];
            }
        }
        return table[n-1];
    }
};
