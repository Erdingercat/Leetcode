 Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 
 
class Solution {
public:
    int threeSumClosest(vector<int> &num, int target) {
        int n = num.size();
        if(n <= 3){
            int sum = 0;
            for(int i = 0; i < n; i++)
                sum += num[i];
            return sum;
        }
        
        

        
        
        stable_sort(num.begin(), num.end());
        
        int sum;
        int closest = num[0] + num[1] + num[n-1];
        
        for(int idx = 0; idx < n-2; idx++){
            // check if we choose num[idx] as the first element
            int curr = num[idx];
            // pick other two elements from the rest, num[idx+1] ~ num[n-1] 
            int i = idx+1;
            int j = n-1;
             
            while(i < j){
                sum = curr +num[i] + num[j];
                if( sum == target) return target; // find closest sum already
                
                closest = (abs(target - sum) < abs(target - closest)) ? sum : closest; //check if find a closer sum.
                
                if(sum < target){  
                    // if we choose num[idx] and num[i], no way to obtain a closer sum, sinces all elements num[j]~mum[n-1] has been checked
                    i++;
                }
                else{
                    // if we choose num[idx] and num[j], no way to obtain a closer sum, sinces all elements num[idx + 1]~mum[i] has been checked
                    j--;
                }
            }
        }
        return closest;
    }
};