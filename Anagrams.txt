Given an array of strings, return all groups of strings that are anagrams.

Note: All inputs will be in lower-case.





class Solution {
public:
vector<int> genPrime(int n) {
    vector<int> res;
    res.push_back(2);
    if (n==1) return res;
    int k = 1;
    for (int i = 3; k < n; i+=2) {
        int j = 2;
        int end = sqrt(i);
        bool prime = true;
        while(j <= end) {
            if (i%j==0) {
                prime = false;
                break;
            }
            j++;
        }
        if (prime) {
            k++;
            res.push_back(i);
        }
    }
    return res;

    
}
    vector<string> anagrams(vector<string> &s) {
        int n = s.size();
        vector<string> res;
        if (n==0 || n==1) return res;
        vector<int> primes = genPrime(26);
        unordered_map<long, int> m;
        unordered_map<long, int>::iterator it;
        for (int i = 0; i < n; ++i) {
            long hash=1;
            for (int j = 0; j < s[i].size(); ++j) {
                hash *= primes[s[i][j]-'a'];
            }
            it = m.find(hash);
            if (it == m.end()) {
                m[hash] = i;
            } else {
                if (it->second > -1) {
                    res.push_back(s[it->second]);
                    m[hash] = -1;
                }
                res.push_back(s[i]);
            }
        }
        return res;
    }
};
















class Solution {
public:
    vector<string> anagrams(vector<string> &strs) {

        vector<string> resSet;
        unordered_map<string, vector<string> > map;
        
        vector<string>::iterator itStr;
        for(itStr = strs.begin(); itStr < strs.end(); itStr++){
            string currStr = *itStr;
            
            /*int* charCnt = new int[26];
            for(int i = 0 ; i < 26; i++){
                charCnt[i] = 0;
            }
            
            string::iterator itCh;
            for(itCh = currStr.begin(); itCh < currStr.end(); itCh++ ){
                int c = (int)(*itCh);
                charCnt[c-97]++;
            }
            
            stringstream buff;
            for(int i = 0 ; i < 26; i++){
                buff << charCnt[i] << ",";
            }
            string key = buff.str();*/
            string key(currStr);
            stable_sort(key.begin(), key.end());
            map[key].push_back(currStr);
        }
        
        
        
        unordered_map<string, vector<string> >::iterator itGroup;
        for(itGroup = map.begin(); itGroup != map.end(); itGroup++){
            vector<string> currGroup = itGroup->second;
            if(currGroup.size() > 1){
                resSet.insert(resSet.begin(), currGroup.begin(), currGroup.end());
            }
        }
        return resSet;
        
    }
};