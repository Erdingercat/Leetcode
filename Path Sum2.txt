/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        vector<vector<int> > res;
  
  
        if(root == NULL){
            return res;
        }else if(root->left == NULL && root -> right == NULL ){
            if(root -> val == sum){
                vector<int> leaf;
                leaf.insert(leaf.begin(),root -> val);
                res.push_back(leaf);
                return res;
            }
        }else{
            
            int new_sum = sum - root -> val;
        
            if(root->left != NULL){
                vector<vector<int> > l = pathSum(root -> left, new_sum);
                res.insert(res.end(), l.begin(), l.end());
            }
            
            if(root->right != NULL){
                vector<vector<int> > r = pathSum(root -> right, new_sum);
                res.insert(res.end(), r.begin(), r.end());
            }   
            
            vector<vector<int> >::iterator it;
            
            for(it = res.begin(); it < res.end(); it++){   
                (*it).insert((*it).begin(),root->val);
            }
            
            return res;
        }
  
  
        return res;
        
    }
};