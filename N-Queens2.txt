Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.



class Solution {
public:

    // Recursively solving the queen2
    
    int totalNQueens(int n, vector<int> pos, int row){
        // Give previous row of the grid, put the queen at current "row" row. 
        
        int num = 0;
        if (row == n) return 1;  // Already put all n  queens, a valid solution found.
        
        // otherwise check each possible column against previous queens
        for(int v = 0; v < n; v++){
            bool valid = 1;
            for(int i = 0; i < row; i++ ){
                int pos_i = pos[i];
                if( pos_i ==  v || (i + pos_i == row + v) || (i - pos_i == row - v)) {
                    valid = 0;
                    break;
                }
            }
            if(!valid) continue;   // cannot find valid solution by putting queen at v column
            
            pos[row] = v;
            // check if put queen at v, how many solutions is possible for the rest rows.
            int numAfter = totalNQueens(n, pos, row + 1); 
            num += numAfter;
        }
        return num;
    }
    
    
    int totalNQueens(int n) {
        vector<int> pos(n, -1);   // pos[i] : which column we put the queen at row i
        return totalNQueens(n, pos, 0);
    }
};



