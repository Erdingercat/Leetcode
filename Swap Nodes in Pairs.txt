Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        if(!head){
            return head;
        }
        
        ListNode* newHead = new ListNode(0);
        newHead->next = head;
        
        ListNode* prev = newHead;
        ListNode* curr = head;
        ListNode* next = head->next;
        
        while(curr && next){
            prev->next = next;
            curr->next = next->next;
            next->next = curr;
            prev = curr;
            curr = curr->next;
            if(curr){
                next = curr->next;
            }
        }
        
        return newHead->next;
    }
};








/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        ListNode *prev, *curr, *post;
        prev = NULL;
        curr = head;
        
        
        while(curr != NULL && curr->next != NULL){
            post = curr->next;
            curr->next = post ->next;
            post->next = curr;
            
            if(prev != NULL){
                prev -> next = post;
            }else{
                head = post;
            }
            
            prev = curr;
            curr = curr->next;
        }
        return head;
        
    }
};