class Solution {
public:
    string minWindow(string S, string T) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        int begin = -1;
        int end = -1;
        string res;
        
        map<char, int> cntFirst;   //used to find first minimal window.
        map<char, int> cntS; // recording chars in S from "begin" to "end"
        map<char, int> cntT; // recording chars in T.
        
        int lenS = S.length();
        int lenT = T.length();
        
        char tmpChar;
        
        //count chars for T
        for(int i = 0; i < lenT; i++){
            tmpChar = T.at(i);
            if(cntT.find(tmpChar) == cntT.end()){
                cntFirst[tmpChar] = 1;
                cntT[tmpChar] = 1;
            }else{
                cntFirst[tmpChar] ++;
                cntT[tmpChar] ++;
            }
        }
        
        //-------------------Finding the first window in S-----------------------------------
        int idx = 0;
        while( !cntFirst.empty() && idx < lenS){
            tmpChar = S.at(idx);
                            
            
            //count chars for T
            if(cntT.find(tmpChar) != cntT.end()){
                if(cntS.find(tmpChar) == cntS.end()){
                    cntS[tmpChar] = 1;
                }else{
                    cntS[tmpChar] ++;
                }
            }
            
            if(cntFirst.find(tmpChar) != cntFirst.end()){
                cntFirst[tmpChar] --;
                
                // Find the first char in T
                if(begin == -1){
                    begin = idx;
                }    
                
                if(cntFirst[tmpChar] == 0){
                    // Already found all chars in T
                    cntFirst.erase(tmpChar);
                    if(cntFirst.empty()){
                        idx ++;
                        break;
                    }
                }
            }
            idx ++;
        }
        
  
        if(!cntFirst.empty()){
            // S didn't contain all chars in T.
            // No window exists.
            return "";
        }
         
        end = idx -1;
        
        // Check if current window contains redundant chars (not minimal) or not
        while(begin <= end){
            tmpChar = S.at(begin);
            
            if(cntS.find(tmpChar) != cntS.end()
            && cntT.find(tmpChar) != cntT.end()
            && cntS[tmpChar] <= cntT[tmpChar]){
                // Already local minimal window.
                break;
            }
            
            // Redundant chars, we can reduce the current window to smaller size.
            cntS[tmpChar] --;
            begin++;
        }
        
        res = S.substr(begin, end-begin+1);
        //-------------------End of finding the first window in S-----------------------------------
        
        
        while(begin < end){ // look for next window
            
            char findChar = S.at(begin);
            cntS[findChar] --;
            
            //move one-position forward
            begin++;
            end++;
            
            // Since we remove one char from begin in the origial window, we need to find one afte the original end
            while( end < lenS && S.at(end) != findChar){                
                tmpChar = S.at(end);
                if(cntT.find(tmpChar) != cntT.end()){
                    if(cntS.find(tmpChar) == cntS.end()){
                        cntS[tmpChar] = 1;
                    }else{
                        cntS[tmpChar] ++;
                    }
                }
                end++;
            }
            if(end != lenS){
                cntS[findChar]++;
            }else{
                break;
            }
            
            // Check if current window contains redundant chars (not minimal) or not
            // Start from the new "begin"
            while(begin <= end){
                tmpChar = S.at(begin);
                
                if(cntS.find(tmpChar) != cntS.end()
                &&   cntT.find(tmpChar) != cntT.end()
                && cntS[tmpChar] <= cntT[tmpChar]){
                    break;
                }
                
                cntS[tmpChar] --;
                begin++;
            }
            
            
            // check if the current window smaller than origiinal minimum window
            string tmpStr = S.substr(begin, end-begin+1);
            if (tmpStr.length() < res.length()){
                res = tmpStr;
            }
        }
        
        return res;
        
        
    }
};