Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *sortedListToBST(ListNode *head) {
        if(!head) return NULL;
        
        int n = 1;
        ListNode* curr  = head;
        while(curr->next){
            n++;
            curr = curr->next;
        }
        
        int mid = n/2 + n%2 -1;
        
        ListNode* prev = NULL;
        ListNode* midNode = head;
        
        for(int i = 0; i < mid; i++){
            prev = midNode;
            midNode = midNode->next;
        }
        
        if(prev) prev->next = NULL;
        
        TreeNode* root = new TreeNode(midNode->val);
        root->left = sortedListToBST(prev?head:NULL);
        root->right = sortedListToBST(midNode->next);
        return root;
    }
};