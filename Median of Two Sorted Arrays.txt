class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
    
        
        double res;
        //res = find_kth_element( &A[0], m, &B[0], n, 4);
        
        if((m+n)%2 == 1){
            res = find_kth_element( &A[0], m, &B[0], n, (m+n)/2+1);
        }else{
            double x = find_kth_element( &A[0], m, &B[0], n, (m+n)/2);
            double y = find_kth_element( &A[0], m, &B[0], n, (m+n)/2+1);
            res = (x+y)/2;
        }
        return res;
        
        
    }
    
    
    
    double find_kth_element(int* A, int m, int* B, int n, int k){
    
    
        if( k  > m+n){
            return INT_MIN;
        }

        
        if(m == 0){
            return B[k-1];
        }else if( n == 0){
            return A[k-1];
        }
        
        
        if(k == 1){
            return min(A[0], B[0]);
        }
        
        int mid = k/2;
        int idxA, idxB;
        
        
        
        
        if (m >= mid && n >= mid){
            if(A[mid-1] < B[mid-1]){
                return find_kth_element(A+mid, m-mid, B, n, k-mid);
            }else if(A[mid-1] > B[mid-1]) {
                return find_kth_element(A, m, B+mid, n-mid, k-mid);
            }else{   // A[idxA] == B[idxB]
                if(k%2 == 0){  // k is even
                    return A[mid-1];
                }else{  // k is odd
                    if( m == mid ){
                        return B[mid];
                    }else if( n == mid){
                        return A[mid];
                    }else{
                        return min(A[mid], B[mid]);
                    }
                }
            }
        }
        
        
        else if ( n < mid){
            if(A[mid-1] <= B[n-1]){
                return find_kth_element(A+mid, m-mid, B, n, k-mid);
            }else if(A[mid-1] > B[n-1]) {
                return A[k-n-1];
            }
        }
        
          
        else if ( m < mid){
            if(A[m-1] >= B[mid-1]){
                return find_kth_element(A, m, B+mid, n-mid, k-mid);
            }else if(A[m-1] < B[mid-1]) {
                return B[k-m-1];
            }
        }
        return INT_MIN;
    }
};