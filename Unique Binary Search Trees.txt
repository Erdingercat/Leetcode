Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
   
class Solution {
public:
    int numTrees(int n) {
        vector<int> cnt(n+1, 0);
        
        cnt[0] =cnt[1] =  1;
        
        for(int i = 2; i <= n; i++){ // i:  tree size (# of nodes)
            int num = 0;
            for(int root = 0; root < i; root ++){   // use which node as root
                num += cnt[root] * cnt[ i-1-root];   //  total number = (# of left trees) * (# of right trees)
            }
            cnt[i] =num;
        }
        return cnt[n];
    }
};