Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        
        vector<string> res;
        if(n == 0){
            return res;
        }if(n == 1){
            res.push_back("()");
            return res;
        }
        
        vector<string> prev = generateParenthesis(n-1);
        for(vector<string>::iterator it = prev.begin(); it != prev.end(); it++){
            string curr = *it;
            curr.insert(0, "(");
            
            int len = curr.length();
            int cnt = 0;
            for(int i = 0; i < len; i++){
                string tmp = curr;
                if(tmp[i] == '(' ){
                    cnt++;
                }else{
                    cnt--;
                }
                
                if(cnt == 1){
                    tmp.insert(i+1, ")");
                    res.push_back(tmp);
                }
            }
        }
        return res;
    }
};