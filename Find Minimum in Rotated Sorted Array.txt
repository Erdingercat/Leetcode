Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.




class Solution {
public:
    int findMin(vector<int> &num) {
        int n = num.size();
        int start = 0;
        int end = n-1;
        
        
        while(start <= end){
            
            int v_start = num[start];
            if(start == end) return v_start; // One elemet in the range
            
            int mid = (start + end)/2;
            int v_mid = num[mid];
            int v_end = num[end];
            
            if(v_start <= v_mid){
                if(v_mid < v_end) return v_start; // sorted between the range num[start~end]
                start = mid + 1;
            }else{
                end = mid;
            }
        }
    }
};