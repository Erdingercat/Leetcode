Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37


class Solution {
public:
    int compareVersion(string version1, string version2) {
        
        while(!version1.empty() || !version2.empty()){
            int idx1 = version1.find('.');
            int idx2 = version2.find('.');
            
            string s1 = version1.substr(0,idx1);
            int val1;
            istringstream(s1) >> val1;
            if(s1 ==  "")  val1 = 0;            
            
            string s2 = version2.substr(0,idx2);
            int val2;
            istringstream(s2) >> val2;
            if(s2 ==  "")  val2 = 0;
            
            if(val1 > val2)  return 1;
            else if(val1 < val2)  return -1;
            
            version1 = version1.substr(idx1+1);
            version2 = version2.substr(idx2+1);
            if(idx1 == -1) version1 = "";
            if(idx2 == -1) version2 = "";
        }
        return 0;
    }
};