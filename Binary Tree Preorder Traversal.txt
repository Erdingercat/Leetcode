Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?



// Non-recursive way



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
        vector<int> res;
        if(!root) return res;
        
        vector<TreeNode*> s;
        s.push_back(root);
        
        while(!s.empty()){
            TreeNode* curr = s.back();
            s.pop_back();
            res.push_back(curr->val);
            
            if(curr->right) s.push_back(curr->right);
            if(curr->left) s.push_back(curr->left);
        }
        return res;
    }
};



// Recursive way
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
        vector<int> preorder;
        if(!root){
            return preorder;
        }
        preorder.push_back(root->val);
        vector<int> l = preorderTraversal(root->left);
        vector<int> r= preorderTraversal(root->right);
        preorder.insert(preorder.end(), l.begin(), l.end() );
        preorder.insert(preorder.end(), r.begin(), r.end() );
    }
};