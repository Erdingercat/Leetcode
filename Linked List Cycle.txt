Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* one = head; // one step in each round
        ListNode* two = head; // two steps in each round
        
        while(two){
            one = one->next;
            two = two->next;
            if(!two)  return 0;  // two reach end : no cycle
            two = two -> next;
            if(one == two)  return 1; //if there's cycle, one and two will eventually meet
        }
        return 0; // if two reach end : no cycle
    }
};