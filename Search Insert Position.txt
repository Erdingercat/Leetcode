Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0



class Solution {
public:
    int searchInsert(int A[], int n, int target) {
        
        // idea : Binary search
        int l = 0, r = n-1;  // range to do search
        
        while(l < r){
            int mid = (l+r)/2;
            int A_mid = A[mid];
            
            if(target == A_mid) return mid;       // find the value : return the position
            else if(target > A_mid) l = mid + 1;  // search the right half
            else r = mid;                         // search the left half
        }
              
        //need to check if we find the left most element , or find the largst element that smaller than target
        return  l + (A[l] < target);
    }
};



// Linear 

class Solution {
public:
    int searchInsert(int A[], int n, int target) {

        for(int i = 0; i < n; i ++){
            if(A[i] >= target){
                return i;
            }
        }
        return n;
    }
};