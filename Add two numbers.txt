



You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int carry = 0;
        ListNode* sol = new ListNode(-1);
        ListNode* curr = sol;
        
        while(1){
            
            int sum = carry;

            bool cont = 0;
            if(l1){
                int v1 = l1->val;
                l1 = l1->next;
                sum += v1;
                cont = 1;
            }
            if(l2){
                int v2 = l2->val;
                l2 = l2->next;
                sum += v2;
                cont = 1;
            }
            if(!cont) break;


            int val = sum%10;
            carry = sum/10;
            
            ListNode* tmp = new ListNode(val);
            curr->next= tmp;
            curr = curr->next;
        }
        
        
        if(carry > 0){
            ListNode* tmp = new ListNode(carry);
            curr->next= tmp;
            curr = curr->next;
        }
        return sol->next;
    }
};












v1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        if(l1 == NULL && l2 == NULL){
            return NULL;
        }else if (l1 == NULL){
            return l2;
        }else if (l2 == NULL){
            return l1;
        }else{//both are not null
            int sum = l1->val + l2->val;
            ListNode *answer;
            ListNode *carry;
            
            carry = new ListNode(sum/10);
            answer = new ListNode(sum%10);
            if(carry->val > 0 )
                answer->next = addTwoNumbers(addTwoNumbers(l1->next, l2->next),carry);
            else
                answer->next = addTwoNumbers(l1->next, l2->next);

            return answer;
        }
        
    }
};



v2
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        if(l1 == NULL && l2 == NULL){
            return NULL;
        }else if (l1 == NULL){
            return l2;
        }else if (l2 == NULL){
            return l1;
        }else{//both are not null
            int sum = l1->val + l2->val;
            ListNode *answer;
            ListNode *carry = NULL;
            
            if(sum >= 10)
                carry = new ListNode(sum/10);
            answer = new ListNode(sum%10);
            answer->next = addTwoNumbers(addTwoNumbers(l1->next, l2->next),carry);
 
            return answer;
        }
        
    }
};