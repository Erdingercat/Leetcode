Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 


class Solution {
public:
    vector<vector<int> > combinationSum2(vector<int> &num, int begin, int end, int target){
        vector<vector<int> > res;

        for(int i = end; i >= begin; i--){
            
            int val_i = num[i];
            if(val_i > target || (i < end && val_i == num[i+1])) continue;
            
            if(val_i == target){
                res.push_back(vector<int>(1, target));
                continue;
            }
            
            int curr_tar = target - val_i;
            vector<vector<int> > subres = combinationSum2(num, begin, i-1, curr_tar);
            for(int j = 0; j < subres.size();j++){
                subres[j].push_back(val_i);
            }
            res.insert(res.begin(), subres.begin(), subres.end());
        }
        return res;
    }

    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        vector<vector<int> > res;
        sort(num.begin(), num.end());
        res = combinationSum2(num, 0, num.size()-1, target);
        return res;
    }
};