/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        
        vector<Interval> res;
        
        int s = newInterval.start;
        int e = newInterval.end;
        
        int new_start = s, new_end = e;
        vector<Interval>::iterator it = intervals.begin();
        
        

        
        for(it = intervals.begin(); it < intervals.end(); it ++ ){
            Interval curr = *it;
            int currS = curr.start;
            int currE = curr.end;
            
            if (currE < s){
                res.push_back(curr);
                continue;
                
            }else if (currS > e){
                break;
            }
            
            new_start = min(currS, new_start);
            new_end = max(currE, new_end);
        }
        
        newInterval.start = new_start;
        newInterval.end = new_end;
        
        res.push_back(newInterval);
        res.insert(res.end(), it, intervals.end());
        
        
        return res;
    }
};













/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        
        int s = newInterval.start;
        int e = newInterval.end;
        
        int new_start = s, new_end = e;
        vector<Interval>::iterator it = intervals.begin();
        
        
        for(it = intervals.begin(); it < intervals.end(); it ++ ){
            Interval curr = *it;
            int currS = curr.start;
            int currE = curr.end;
            
            if (currE < s){
                continue;
                
            }else if (currS > e){
                break;
            }
            
            new_start = min(currS, new_start);
            new_end = max(currE, new_end);
            
            intervals.erase(it);
            it--;
        }
        
        newInterval.start = new_start;
        newInterval.end = new_end;
  
        intervals.insert(it, newInterval);

        return intervals;
    }
};